class RED4Serializer {
  constructor() {
    this.formatVersion = 0x52344356; // "R4CV" - RED4 Conversion Version
  }
  
  async serializeMesh(meshData, outputPath) {
    // Create a buffer with appropriate size
    const headerSize = 0x30;
    const vertexSize = meshData.vertexData.vertices.length * meshData.vertexData.stride;
    const indexSize = meshData.indexData.length * 2; // 16-bit indices
    const submeshSize = meshData.submeshes.length * 16;
    const totalSize = headerSize + vertexSize + indexSize + submeshSize;
    
    const buffer = Buffer.alloc(totalSize);
    const view = new DataView(buffer.buffer);
    
    // Write header
    buffer.write('MESH', 0);
    view.setUint32(0x04, this.formatVersion, true);
    view.setUint32(0x08, totalSize, true);
    view.setUint32(0x10, meshData.vertexData.vertices.length, true);
    view.setUint32(0x14, meshData.indexData.length, true);
    view.setUint32(0x18, meshData.submeshes.length, true);
    
    // Write vertex data
    let offset = headerSize;
    for (const vertex of meshData.vertexData.vertices) {
      offset = this.writeVertex(buffer, offset, vertex, meshData.vertexData.formats);
    }
    
    // Write index data
    for (let i = 0; i < meshData.indexData.length; i++) {
      view.setUint16(offset, meshData.indexData[i], true);
      offset += 2;
    }
    
    // Write submesh data
    for (const submesh of meshData.submeshes) {
      view.setUint32(offset, submesh.materialID, true);
      view.setUint32(offset + 4, submesh.indexStart, true);
      view.setUint32(offset + 8, submesh.indexCount, true);
      view.setUint32(offset + 12, submesh.vertexStart, true);
      offset += 16;
    }
    
    // Write the buffer to file
    await fs.writeFile(outputPath, buffer);
    return outputPath;
  }
  
  writeVertex(buffer, offset, vertex, formats) {
    const view = new DataView(buffer.buffer);
    
    for (const format of formats) {
      const attr = vertex[format.name];
      
      switch(format.type) {
        case 'float3':
          view.setFloat32(offset, attr.x, true);
          view.setFloat32(offset + 4, attr.y, true);
          view.setFloat32(offset + 8, attr.z, true);
          offset += 12;
          break;
        case 'float2':
          view.setFloat32(offset, attr.u, true);
          view.setFloat32(offset + 4, attr.v, true);
          offset += 8;
          break;
        // Additional attribute types
      }
    }
    
    return offset;
  }
  
  async serializeTexture(textureData, outputPath) {
    // Similar structure to serializeMesh but for textures
    const headerSize = 0x30;
    const totalSize = headerSize + textureData.dataSize;
    
    const buffer = Buffer.alloc(totalSize);
    const view = new DataView(buffer.buffer);
    
    // Write header
    buffer.write('XBM2', 0);
    view.setUint32(0x04, this.formatVersion, true);
    view.setUint32(0x08, totalSize, true);
    view.setUint32(0x10, textureData.header.width, true);
    view.setUint32(0x14, textureData.header.height, true);
    view.setUint16(0x18, textureData.header.mipCount, true);
    view.setUint16(0x1A, this.getFormatID(textureData.formatInfo), true);
    
    // Write texture data
    textureData.textureData.copy(buffer, headerSize);
    
    // Write the buffer to file
    await fs.writeFile(outputPath, buffer);
    return outputPath;
  }
  
  getFormatID(formatInfo) {
    // Map of format names to format IDs
    const formatIDs = {
      'BC1': 0x01,
      'BC3': 0x03,
      'BC7': 0x07,
      'RGBA8': 0x09
      // Additional formats
    };
    
    return formatIDs[formatInfo.name] || 0;
  }
  
  // Similar implementations for animation, appearance, and entity serializers
}