pascalCase(str) {
    return str
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join('');
  }
  
  generatePhasesCode(questStructure) {
    let code = '';
    
    for (const phase of questStructure.phases) {
      code += `    let phase_${phase.id} = new ${this.pascalCase(questStructure.id)}Phase();\n`;
      code += `    phase_${phase.id}.Initialize("${phase.id}", "${phase.name}", this);\n`;
      
      // Add objectives to phase
      for (const objectiveId of phase.objectiveIds) {
        code += `    phase_${phase.id}.AddObjective("${objectiveId}");\n`;
      }
      
      // Set completion condition
      const condition = phase.completionCondition;
      if (condition.type === 'ObjectiveComplete') {
        code += `    phase_${phase.id}.SetCompletionCondition("${condition.type}", "${condition.objectiveId}");\n`;
      } else if (condition.type === 'AllObjectivesComplete') {
        code += `    phase_${phase.id}.SetCompletionCondition("${condition.type}", "${condition.objectiveIds.join(',')}");\n`;
      }
      
      code += `    this.m_phases.PushBack(phase_${phase.id});\n\n`;
    }
    
    return code;
  }
  
  generateObjectivesCode(questStructure) {
    let code = '';
    
    for (const objective of questStructure.objectives) {
      code += `    let objective_${objective.id} = new JournalQuestObjective();\n`;
      code += `    objective_${objective.id}.SetId(TDBID.Create("${objective.id}"));\n`;
      code += `    objective_${objective.id}.SetTitle("${objective.name}");\n`;
      code += `    objective_${objective.id}.SetDescription("${objective.description}");\n`;
      code += `    objective_${objective.id}.SetState(gameJournalObjectiveState.Inactive);\n`;
      code += `    objective_${objective.id}.SetIsOptional(${objective.isOptional});\n`;
      
      // Add waypoint if defined
      if (objective.waypoint) {
        code += `    // Waypoint would be added here in a real implementation\n`;
      }
      
      code += `    this.m_objectives.PushBack(objective_${objective.id});\n\n`;
    }
    
    return code;
  }
  
  generateItemRewardsCode(questStructure) {
    let code = '';
    
    if (questStructure.rewards.items && questStructure.rewards.items.length > 0) {
      for (const item of questStructure.rewards.items) {
        code += `        // Add item: ${item.name}\n`;
        code += `        AddItemToInventory(player, "${item.id}", ${item.quantity || 1});\n`;
      }
    } else {
      code += `        // No item rewards defined\n`;
    }
    
    return code;
  }
  
  generateItemObjectivesCode(questStructure) {
    let code = '';
    
    // Find objectives that are completed by getting an item
    const itemObjectives = questStructure.objectives.filter(obj => 
      obj.completionType === 'Interaction' && obj.targetItem
    );
    
    if (itemObjectives.length > 0) {
      code += `    if (`;
      
      for (let i = 0; i < itemObjectives.length; i++) {
        const obj = itemObjectives[i];
        code += `Equals(itemIDName, "${obj.targetItem}")`;
        
        if (i < itemObjectives.length - 1) {
          code += ` || `;
        }
      }
      
      code += `) {\n`;
      
      for (const obj of itemObjectives) {
        code += `      if (Equals(itemIDName, "${obj.targetItem}")) {\n`;
        code += `        this.m_quest.CompleteObjective("${obj.id}");\n`;
        code += `        LogChannel(n"${questStructure.id}", "Item objective completed: ${obj.name}");\n`;
        code += `      }\n`;
      }
      
      code += `    }\n`;
    } else {
      code += `    // No item-related objectives\n`;
    }
    
    return code;
  }
  
  generateCombatObjectivesCode(questStructure) {
    let code = '';
    
    // Find objectives that are completed by defeating NPCs
    const combatObjectives = questStructure.objectives.filter(obj => 
      obj.completionType === 'Combat' && obj.enemyNPCs
    );
    
    if (combatObjectives.length > 0) {
      code += `    // Check each combat objective\n`;
      
      for (const obj of combatObjectives) {
        code += `    // Check enemies for objective: ${obj.name}\n`;
        code += `    {\n`;
        code += `      let allDefeated = true;\n`;
        code += `      let enemiesDefeated = GetPersistentStatValue("${questStructure.id}_${obj.id}_enemies_defeated");\n`;
        
        for (const enemyNPC of obj.enemyNPCs) {
          code += `      if (Equals(target, "${enemyNPC}")) {\n`;
          code += `        // Mark this enemy as defeated\n`;
          code += `        SetPersistentStatValue("${questStructure.id}_${obj.id}_${enemyNPC}_defeated", 1);\n`;
          code += `        IncrementPersistentStat("${questStructure.id}_${obj.id}_enemies_defeated");\n`;
          code += `      }\n`;
          
          code += `      if (GetPersistentStatValue("${questStructure.id}_${obj.id}_${enemyNPC}_defeated") == 0) {\n`;
          code += `        allDefeated = false;\n`;
          code += `      }\n`;
        }
        
        code += `      if (allDefeated || enemiesDefeated >= ${obj.enemyNPCs.length}) {\n`;
        code += `        this.m_quest.CompleteObjective("${obj.id}");\n`;
        code += `        LogChannel(n"${questStructure.id}", "Combat objective completed: ${obj.name}");\n`;
        code += `      }\n`;
        code += `    }\n`;
      }
    } else {
      code += `    // No combat-related objectives\n`;
    }
    
    return code;
  }
  
  async generateDialogues(questStructure) {
    // Generate dialogue trees as JSON files
    const results = {};
    
    for (const dialogueTree of questStructure.dialogueTrees) {
      const dialoguePath = path.join(this.config.paths.tempPath, 'dialogues', `${dialogueTree.id}.json`);
      await fs.ensureDir(path.dirname(dialoguePath));
      
      // Clean up the dialogue tree for saving
      const cleanDialogueTree = {
        id: dialogueTree.id,
        npcId: dialogueTree.npcId,
        nodes: dialogueTree.nodes.map(node => ({
          id: node.id,
          text: node.text,
          voiceId: node.voiceId,
          animation: node.animation,
          playerResponses: node.playerResponses,
          actions: node.actions
        }))
      };
      
      // Save the dialogue tree
      await fs.writeJson(dialoguePath, cleanDialogueTree, { spaces: 2 });
      
      results[dialogueTree.id] = dialoguePath;
    }
    
    return results;
  }
  
  async generateScenes(questStructure) {
    // Generate scene files for the quest
    const results = {};
    
    // Create intro scene
    const introScenePath = path.join(this.config.paths.tempPath, 'scenes', `${questStructure.id}_intro.scene`);
    await fs.ensureDir(path.dirname(introScenePath));
    
    const introScene = {
      id: `${questStructure.id}_intro`,
      name: `${questStructure.name} - Introduction`,
      type: 'cutscene',
      duration: 20, // seconds
      location: questStructure.locations[0],
      actors: [
        { id: 'player', position: [0, 0, 0], rotation: [0, 0, 0] },
        { 
          id: questStructure.npcs[0].id, 
          position: [2, 0, 0], 
          rotation: [0, -90, 0] 
        }
      ],
      dialogueTreeId: questStructure.dialogueTrees[0].id,
      cameraShots: [
        {
          type: 'establishing',
          duration: 5,
          cameraPosition: [5, 2, 5],
          cameraTarget: [0, 1, 0],
          fov: 60
        },
        {
          type: 'closeup',
          duration: 5,
          cameraPosition: [1, 1.7, 3],
          cameraTarget: [0, 1.7, 0],
          fov: 45
        },
        {
          type: 'twoshot',
          duration: 10,
          cameraPosition: [3, 1.7, 3],
          cameraTarget: [1, 1.7, 0],
          fov: 50
        }
      ]
    };
    
    await fs.writeJson(introScenePath, introScene, { spaces: 2 });
    results[`${questStructure.id}_intro`] = introScenePath;
    
    // Create conclusion scene
    const conclusionScenePath = path.join(this.config.paths.tempPath, 'scenes', `${questStructure.id}_conclusion.scene`);
    
    const conclusionScene = {
      id: `${questStructure.id}_conclusion`,
      name: `${questStructure.name} - Conclusion`,
      type: 'cutscene',
      duration: 15, // seconds
      location: questStructure.locations[0],
      actors: [
        { id: 'player', position: [0, 0, 0], rotation: [0, 0, 0] },
        { 
          id: questStructure.npcs[0].id, 
          position: [2, 0, 0], 
          rotation: [0, -90, 0] 
        }
      ],
      dialogueTreeId: questStructure.dialogueTrees[1].id,
      cameraShots: [
        {
          type: 'closeup',
          duration: 5,
          cameraPosition: [1, 1.7, 3],
          cameraTarget: [0, 1.7, 0],
          fov: 45
        },
        {
          type: 'twoshot',
          duration: 10,
          cameraPosition: [3, 1.7, 3],
          cameraTarget: [1, 1.7, 0],
          fov: 50
        }
      ]
    };
    
    await fs.writeJson(conclusionScenePath, conclusionScene, { spaces: 2 });
    results[`${questStructure.id}_conclusion`] = conclusionScenePath;
    
    return results;
  }
  
  async generateVoiceContent(dialogues) {
    // Generate voice content for dialogues
    const results = {};
    
    // Collect all dialogue lines
    const voiceLines = [];
    
    for (const [dialogueId, dialoguePath] of Object.entries(dialogues)) {
      const dialogueTree = await fs.readJson(dialoguePath);
      
      for (const node of dialogueTree.nodes) {
        if (node.voiceId) {
          voiceLines.push({
            id: node.voiceId,
            text: node.text,
            npcId: dialogueTree.npcId
          });
        }
      }
    }
    
    // Generate voice for each line
    for (const line of voiceLines) {
      const outputPath = path.join(this.config.paths.tempPath, 'audio', `${line.id}.wav`);
      await fs.ensureDir(path.dirname(outputPath));
      
      // Generate voice
      const voicePath = await this.voiceGenerator.synthesizeVoice(line.text, line.npcId, outputPath);
      
      // Convert to game format
      const gamePath = await this.voiceGenerator.convertToGameFormat(voicePath, line.id);
      
      results[line.id] = gamePath;
    }
    
    return results;
  }
}