class WolvenKitIntegration {
  constructor(config) {
    this.config = config;
    this.wolvenKitPath = config.paths.wolvenKitPath || config.wolvenKit.installPath;
    this.wolvenKitCLI = path.join(this.wolvenKitPath, 'WolvenKit.CLI.exe');
    this.gamePath = config.paths.gamePath;
    
    // Initialize supported frameworks
    this.supportedFrameworks = {
      'redscript': {
        name: 'Redscript',
        version: '1.5.0',
        path: path.join(this.gamePath, 'r6', 'scripts'),
        website: 'https://github.com/jac3km4/redscript',
        installCheck: () => fs.existsSync(path.join(this.gamePath, 'bin', 'x64', 'redscript.dll'))
      },
      'red4ext': {
        name: 'RED4ext',
        version: '1.15.0',
        path: path.join(this.gamePath, 'red4ext'),
        website: 'https://github.com/WopsS/RED4ext',
        installCheck: () => fs.existsSync(path.join(this.gamePath, 'bin', 'x64', 'RED4ext.dll'))
      },
      'cyber-engine-tweaks': {
        name: 'Cyber Engine Tweaks',
        version: '1.24.1',
        path: path.join(this.gamePath, 'bin', 'x64', 'plugins', 'cyber_engine_tweaks'),
        website: 'https://github.com/yamashi/CyberEngineTweaks',
        installCheck: () => fs.existsSync(path.join(this.gamePath, 'bin', 'x64', 'plugins', 'cyber_engine_tweaks', 'CyberEngineTweaks.asi'))
      },
      'archivexl': {
        name: 'ArchiveXL',
        version: '1.6.0',
        path: path.join(this.gamePath, 'red4ext', 'plugins', 'ArchiveXL'),
        website: 'https://github.com/psiberx/cp2077-archive-xl',
        installCheck: () => fs.existsSync(path.join(this.gamePath, 'red4ext', 'plugins', 'ArchiveXL', 'ArchiveXL.dll'))
      },
      'tweakxl': {
        name: 'TweakXL',
        version: '1.5.0',
        path: path.join(this.gamePath, 'red4ext', 'plugins', 'TweakXL'),
        website: 'https://github.com/psiberx/cp2077-tweak-xl',
        installCheck: () => fs.existsSync(path.join(this.gamePath, 'red4ext', 'plugins', 'TweakXL', 'TweakXL.dll'))
      }
    };
  }
  
  async ensureInstalled() {
    // Check if WolvenKit is already installed
    if (fs.existsSync(this.wolvenKitCLI)) {
      logger.info(`WolvenKit already installed at: ${this.wolvenKitPath}`);
      return true;
    }
    
    // Check if auto-install is enabled
    if (!this.config.wolvenKit.autoInstall) {
      logger.error('WolvenKit not found and auto-install is disabled');
      throw new Error('WolvenKit is required but not installed. Enable auto-install or install it manually.');
    }
    
    // Auto-install WolvenKit
    logger.info('Auto-installing WolvenKit...');
    
    try {
      // Create installation directory
      if (!this.config.wolvenKit.installPath) {
        this.config.wolvenKit.installPath = path.join(Utils.getUserDataDir(), 'WolvenKit');
        this.wolvenKitPath = this.config.wolvenKit.installPath;
        this.wolvenKitCLI = path.join(this.wolvenKitPath, 'WolvenKit.CLI.exe');
      }
      
      await fs.ensureDir(this.config.wolvenKit.installPath);
      
      // Get latest WolvenKit release info
      const releaseInfo = await this.getLatestWolvenKitRelease();
      logger.info(`Found WolvenKit release: ${releaseInfo.version}`);
      
      // Download the release
      const downloadPath = path.join(this.config.paths.tempPath, `WolvenKit_${releaseInfo.version}.zip`);
      await this.downloadFile(releaseInfo.downloadUrl, downloadPath);
      
      // Extract the archive
      const zip = new AdmZip(downloadPath);
      zip.extractAllTo(this.config.wolvenKit.installPath, true);
      
      // Cleanup
      await fs.remove(downloadPath);
      
      logger.info(`WolvenKit installed successfully at: ${this.config.wolvenKit.installPath}`);
      return true;
    } catch (error) {
      logger.error('Error installing WolvenKit:', error);
      throw error;
    }
  }
  
  async getLatestWolvenKitRelease() {
    try {
      // Get latest release info from GitHub API
      const response = await axios.get('https://api.github.com/repos/WolvenKit/WolvenKit/releases/latest', {
        headers: {
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Cyberpunk-2077-Mod-Generator'
        }
      });
      
      const release = response.data;
      
      // Find the proper asset (ZIP file)
      const asset = release.assets.find(asset => 
        asset.name.endsWith('.zip') && 
        asset.name.includes('WolvenKit') && 
        !asset.name.includes('hotfix')
      );
      
      if (!asset) {
        throw new Error('Could not find a suitable WolvenKit release asset');
      }
      
      return {
        version: release.tag_name.replace('v', ''),
        downloadUrl: asset.browser_download_url
      };
    } catch (error) {
      logger.error('Error getting latest WolvenKit release:', error);
      
      // Fallback to a hardcoded URL for demo purposes
      return {
        version: '8.7.0',
        downloadUrl: 'https://github.com/WolvenKit/WolvenKit/releases/download/8.7.0/WolvenKit.zip'
      };
    }
  }
  
  async downloadFile(url, destination) {
    const spinner = ora(`Downloading ${url}...`).start();
    
    try {
      const response = await axios({
        method: 'GET',
        url: url,
        responseType: 'stream'
      });
      
      const writer = fs.createWriteStream(destination);
      
      response.data.pipe(writer);
      
      return new Promise((resolve, reject) => {
        writer.on('finish', () => {
          spinner.succeed(`Downloaded to ${destination}`);
          resolve(destination);
        });
        
        writer.on('error', (error) => {
          spinner.fail(`Download failed: ${error.message}`);
          reject(error);
        });
      });
    } catch (error) {
      spinner.fail(`Download failed: ${error.message}`);
      throw error;
    }
  }
  
  async checkModdingFrameworks() {
    // Check which modding frameworks are installed
    const installedFrameworks = {};
    
    for (const [id, framework] of Object.entries(this.supportedFrameworks)) {
      installedFrameworks[id] = {
        ...framework,
        installed: await framework.installCheck()
      };
    }
    
    return installedFrameworks;
  }
  
  async installModdingFramework(frameworkId) {
    // Install a modding framework
    const framework = this.supportedFrameworks[frameworkId];
    
    if (!framework) {
      throw new Error(`Unknown framework: ${frameworkId}`);
    }
    
    if (await framework.installCheck()) {
      logger.info(`${framework.name} is already installed`);
      return true;
    }
    
    logger.info(`Installing ${framework.name}...`);
    
    try {
      // Get framework download URL (this would call the GitHub API in a real implementation)
      const downloadUrl = await this.getFrameworkDownloadUrl(frameworkId);
      
      // Download the framework
      const downloadPath = path.join(this.config.paths.tempPath, `${frameworkId}.zip`);
      await this.downloadFile(downloadUrl, downloadPath);
      
      // Extract and install
      await this.installFramework(frameworkId, downloadPath);
      
      // Cleanup
      await fs.remove(downloadPath);
      
      // Verify installation
      const installed = await framework.installCheck();
      
      if (installed) {
        logger.info(`${framework.name} installed successfully`);
        return true;
      } else {
        throw new Error(`${framework.name} installation verification failed`);
      }
    } catch (error) {
      logger.error(`Error installing ${framework.name}:`, error);
      throw error;
    }
  }
  
  async getFrameworkDownloadUrl(frameworkId) {
    // Get download URL for a framework
    // This would use GitHub API to get the latest release
    const frameworkUrls = {
      'redscript': 'https://github.com/jac3km4/redscript/releases/download/v0.5.14/redscript-v0.5.14.zip',
      'red4ext': 'https://github.com/WopsS/RED4ext/releases/download/v1.13.0/RED4ext.zip',
      'cyber-engine-tweaks': 'https://github.com/yamashi/CyberEngineTweaks/releases/download/v1.24.1/CyberEngineTweaks_1.24.1.zip',
      'archivexl': 'https://github.com/psiberx/cp2077-archive-xl/releases/download/v1.6.0/ArchiveXL.zip',
      'tweakxl': 'https://github.com/psiberx/cp2077-tweak-xl/releases/download/v1.5.0/TweakXL.zip'
    };
    
    return frameworkUrls[frameworkId] || null;
  }
  
  async installFramework(frameworkId, downloadPath) {
    // Extract and install framework files
    const framework = this.supportedFrameworks[frameworkId];
    
    // Extract ZIP
    const zip = new AdmZip(downloadPath);
    
    // Different installation procedures for different frameworks
    switch (frameworkId) {
      case 'redscript':
        // Install to game root directory
        zip.extractAllTo(this.gamePath, true);
        break;
        
      case 'red4ext':
        // Install to game root directory
        zip.extractAllTo(this.gamePath, true);
        break;
        
      case 'cyber-engine-tweaks':
        // Install to bin/x64
        zip.extractAllTo(path.join(this.gamePath, 'bin', 'x64'), true);
        break;
        
      case 'archivexl':
      case 'tweakxl':
        // Install to red4ext/plugins
        const pluginsDir = path.join(this.gamePath, 'red4ext', 'plugins');
        await fs.ensureDir(pluginsDir);
        zip.extractAllTo(pluginsDir, true);
        break;
    }
  }
  
  async createModProject(modName, modType, outputDir) {
    // Create a new mod project using WolvenKit
    logger.info(`Creating mod project: ${modName}`);
    
    try {
      // Create mod directory
      const modDir = path.join(outputDir, modName);
      await fs.ensureDir(modDir);
      
      // Use WolvenKit CLI to initialize project
      if (this.config.wolvenKit.useCLI) {
        await this.runWolvenKitCommand('create-project', [
          '--name', modName,
          '--path', modDir
        ]);
      } else {
        // Manual creation of project structure
        await this.createProjectStructure(modDir, modName, modType);
      }
      
      return modDir;
    } catch (error) {
      logger.error('Error creating mod project:', error);
      throw error;
    }
  }
  
  async createProjectStructure(modDir, modName, modType) {
    // Create basic mod structure
    await fs.ensureDir(path.join(modDir, 'archive', 'pc', 'mod'));
    await fs.ensureDir(path.join(modDir, 'r6', 'scripts'));
    await fs.ensureDir(path.join(modDir, 'r6', 'tweaks'));
    await fs.ensureDir(path.join(modDir, 'red4ext', 'plugins'));
    
    // Create info.json
    const infoJson = {
      name: modName,
      version: this.config.modDefaults.version,
      author: this.config.modDefaults.author,
      description: `Auto-generated ${modType} mod`,
      gameVersion: this.config.modDefaults.gameVersion
    };
    
    await fs.writeJson(path.join(modDir, 'info.json'), infoJson, { spaces: 2 });
    
    // Create README.md
    const readmeContent = `# ${modName}

Auto-generated ${modType} mod for Cyberpunk 2077.

## Requirements
- Cyberpunk 2077 ${this.config.modDefaults.gameVersion}
- RED4ext
- Redscript

## Installation
1. Extract the archive to your Cyberpunk 2077 installation directory
2. Launch the game and enjoy!

## Credits
Created by: ${this.config.modDefaults.author}
Generated with: Cyberpunk 2077 Mod Generator
`;
    
    await fs.writeFile(path.join(modDir, 'README.md'), readmeContent);
  }
  
  async importRawFile(filePath, modDir, type) {
    // Import a raw file into the mod project
    logger.info(`Importing file ${filePath} as ${type}`);
    
    try {
      // Determine target directory based on type
      let targetDir;
      
      switch (type) {
        case 'mesh':
          targetDir = path.join(modDir, 'archive', 'pc', 'mod', 'meshes');
          break;
        case 'texture':
          targetDir = path.join(modDir, 'archive', 'pc', 'mod', 'textures');
          break;
        case 'script':
          targetDir = path.join(modDir, 'r6', 'scripts');
          break;
        case 'tweak':
          targetDir = path.join(modDir, 'r6', 'tweaks');
          break;
        default:
          targetDir = path.join(modDir, 'archive', 'pc', 'mod');
      }
      
      await fs.ensureDir(targetDir);
      
      // Use WolvenKit CLI to import if available
      if (this.config.wolvenKit.useCLI) {
        await this.runWolvenKitCommand('import', [
          '--path', filePath,
          '--outpath', targetDir,
          '--type', type
        ]);
      } else {
        // Manual import
        await fs.copy(filePath, path.join(targetDir, path.basename(filePath)));
      }
    } catch (error) {
      logger.error(`Error importing file ${filePath}:`, error);
      throw error;
    }
  }
  
  async packageMod(modDir, outputPath) {
    // Package a mod directory into a distributable archive
    logger.info(`Packaging mod from ${modDir}`);
    
    try {
      // Use WolvenKit CLI to package if available
      if (this.config.wolvenKit.useCLI) {
        await this.runWolvenKitCommand('pack', [
          '--path', modDir,
          '--outpath', outputPath
        ]);
      } else {
        // Manual packaging
        await this.manualPackageMod(modDir, outputPath);
      }
      
      logger.info(`Mod packaged to: ${outputPath}`);
      return outputPath;
    } catch (error) {
      logger.error('Error packaging mod:', error);
      throw error;
    }
  }
  
  async manualPackageMod(modDir, outputPath) {
    // Create a ZIP archive of the mod
    const zip = new AdmZip();
    
    // Add mod files to the archive
    await this.addDirToZip(zip, modDir, '');
    
    // Write the ZIP file
    zip.writeZip(outputPath);
  }
  
  async addDirToZip(zip, dir, zipPath) {
    const entries = await fs.readdir(dir, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);
      const zipEntryPath = path.join(zipPath, entry.name);
      
      if (entry.isDirectory()) {
        zip.addFile(zipEntryPath + '/', Buffer.alloc(0));
        await this.addDirToZip(zip, fullPath, zipEntryPath);
      } else {
        const content = await fs.readFile(fullPath);
        zip.addFile(zipEntryPath, content);
      }
    }
  }
  
  async runWolvenKitCommand(command, args = []) {
    // Run a WolvenKit CLI command
    return new Promise((resolve, reject) => {
      const cmdArgs = [command, ...args];
      
      logger.debug(`Running WolvenKit command: ${this.wolvenKitCLI} ${cmdArgs.join(' ')}`);
      
      const process = spawn(this.wolvenKitCLI, cmdArgs);
      
      let stdout = '';
      let stderr = '';
      
      process.stdout.on('data', (data) => {
        stdout += data.toString();
        logger.debug(`WolvenKit stdout: ${data}`);
      });
      
      process.stderr.on('data', (data) => {
        stderr += data.toString();
        logger.error(`WolvenKit stderr: ${data}`);
      });
      
      process.on('close', (code) => {
        if (code === 0) {
          resolve(stdout);
        } else {
          reject(new Error(`WolvenKit command failed with code ${code}: ${stderr}`));
        }
      });
    });
  }
  
  async validateDependencies(modDir) {
    // Check for mod dependencies and validate them
    const result = {
      valid: true,
      missingDependencies: [],
      warnings: []
    };
    
    try {
      // Check for dependencies in info.json
      const infoPath = path.join(modDir, 'info.json');
      if (fs.existsSync(infoPath)) {
        const info = await fs.readJson(infoPath);
        
        if (info.dependencies && Array.isArray(info.dependencies)) {
          for (const dependency of info.dependencies) {
            const installed = await this.checkDependencyInstalled(dependency);
            
            if (!installed) {
              result.valid = false;
              result.missingDependencies.push(dependency);
            }
          }
        }
      }
      
      // Check for framework requirements based on mod content
      const frameworks = await this.detectRequiredFrameworks(modDir);
      
      for (const [framework, required] of Object.entries(frameworks)) {
        if (required) {
          const frameworkInfo = this.supportedFrameworks[framework];
          const installed = await frameworkInfo.installCheck();
          
          if (!installed) {
            result.valid = false;
            result.missingDependencies.push(frameworkInfo.name);
            result.warnings.push(`Mod requires ${frameworkInfo.name} which is not installed`);
          }
        }
      }
    } catch (error) {
      logger.error('Error validating dependencies:', error);
      result.valid = false;
      result.warnings.push(`Error checking dependencies: ${error.message}`);
    }
    
    return result;
  }
  
  async checkDependencyInstalled(dependency) {
    // Check if a mod dependency is installed
    // This is a simplified check; a real implementation would be more thorough
    
    // Look for mod in the game directory
    const modPaths = [
      path.join(this.gamePath, 'archive', 'pc', 'mod', dependency),
      path.join(this.gamePath, 'mods', dependency),
      path.join(this.gamePath, 'r6', 'scripts', dependency)
    ];
    
    for (const modPath of modPaths) {
      if (fs.existsSync(modPath)) {
        return true;
      }
    }
    
    return false;
  }
  
  async detectRequiredFrameworks(modDir) {
    // Detect which frameworks the mod requires based on its content
    const frameworks = {
      'redscript': false,
      'red4ext': false,
      'cyber-engine-tweaks': false,
      'archivexl': false,
      'tweakxl': false
    };
    
    // Check for redscript files
    if (fs.existsSync(path.join(modDir, 'r6', 'scripts'))) {
      const scriptFiles = await fs.readdir(path.join(modDir, 'r6', 'scripts'));
      if (scriptFiles.some(file => file.endsWith('.reds'))) {
        frameworks['redscript'] = true;
      }
    }
    
    // Check for RED4ext plugins
    if (fs.existsSync(path.join(modDir, 'red4ext', 'plugins'))) {
      frameworks['red4ext'] = true;
    }
    
    // Check for Cyber Engine Tweaks scripts
    if (fs.existsSync(path.join(modDir, 'bin', 'x64', 'plugins', 'cyber_engine_tweaks', 'mods'))) {
      frameworks['cyber-engine-tweaks'] = true;
    }
    
    // Check for TweakXL files
    if (fs.existsSync(path.join(modDir, 'r6', 'tweaks'))) {
      const tweakFiles = await fs.readdir(path.join(modDir, 'r6', 'tweaks'));
      if (tweakFiles.some(file => file.endsWith('.yaml') || file.endsWith('.yml'))) {
        frameworks['tweakxl'] = true;
      }
    }
    
    // Check for ArchiveXL files
    const archivePath = path.join(modDir, 'archive', 'pc', 'mod');
    if (fs.existsSync(archivePath)) {
      // Look for .xl files or .archive.xl files
      const xlFiles = await Utils.findFiles(archivePath, '.xl', 0);
      if (xlFiles.length > 0) {
        frameworks['archivexl'] = true;
      }
    }
    
    return frameworks;
  }
}