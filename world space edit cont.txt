async createEnvironmentStructure(params) {
    // Create the base environment structure
    const envId = params.name.toLowerCase().replace(/\s+/g, '_');
    
    // Basic environment structure
    const structure = {
      id: envId,
      name: params.name,
      description: params.description || `Environment mod: ${params.name}`,
      area: params.area || {
        district: 'Watson',
        size: {
          width: 500,
          length: 500
        },
        center: {
          x: 0,
          y: 0,
          z: 0
        }
      },
      
      // Terrain modifications
      terrain: params.terrain || {
        heightModifications: [
          {
            type: 'hill',
            position: { x: 50, y: 50 },
            radius: 100,
            height: 20
          },
          {
            type: 'crater',
            position: { x: -50, y: -50 },
            radius: 40,
            depth: 10
          }
        ],
        materialOverrides: [
          {
            area: {
              points: [
                { x: -100, y: -100 },
                { x: 100, y: -100 },
                { x: 100, y: 100 },
                { x: -100, y: 100 }
              ]
            },
            material: 'concrete_damaged'
          }
        ]
      },
      
      // Object placements
      objects: params.objects || [
        {
          type: 'building',
          template: 'industrial_warehouse',
          position: { x: 0, y: 0, z: 0 },
          rotation: { x: 0, y: 0, z: 0 },
          scale: { x: 1, y: 1, z: 1 }
        },
        {
          type: 'prop',
          template: 'dumpster',
          position: { x: 50, y: 50, z: 0 },
          rotation: { x: 0, y: 45, z: 0 },
          scale: { x: 1, y: 1, z: 1 }
        },
        {
          type: 'vegetation',
          template: 'tree_palm',
          position: { x: -50, y: 50, z: 0 },
          rotation: { x: 0, y: 0, z: 0 },
          scale: { x: 1, y: 1, z: 1 }
        }
      ],
      
      // Lighting and atmosphere
      atmosphere: params.atmosphere || {
        daytimeSettings: {
          ambientColor: '#4B6584',
          sunColor: '#F0C419',
          sunIntensity: 1.2,
          skyColor: '#3498DB'
        },
        nighttimeSettings: {
          ambientColor: '#2C3E50',
          moonColor: '#BDC3C7',
          moonIntensity: 0.5,
          skyColor: '#1C2833'
        },
        fogSettings: {
          color: '#D6EAF8',
          density: 0.02,
          startDistance: 100,
          endDistance: 1000
        }
      },
      
      // Weather patterns
      weather: params.weather || {
        patterns: [
          {
            type: 'clear',
            probability: 0.5,
            duration: {
              min: 60,
              max: 180
            }
          },
          {
            type: 'rain',
            probability: 0.3,
            duration: {
              min: 30,
              max: 90
            },
            intensity: 0.8
          },
          {
            type: 'fog',
            probability: 0.2,
            duration: {
              min: 45,
              max: 120
            },
            intensity: 0.6
          }
        ]
      }
    };
    
    return structure;
  }
  
  async generateTerrainModifications(envStructure) {
    // Generate terrain modifications based on the environment structure
    const terrainDir = path.join(this.config.paths.tempPath, 'environment', envStructure.id, 'terrain');
    await fs.ensureDir(terrainDir);
    
    // Generate heightmap
    const heightmapPath = await this.generateHeightmap(envStructure, terrainDir);
    
    // Generate material map
    const materialmapPath = await this.generateMaterialMap(envStructure, terrainDir);
    
    // Generate terrain.xml configuration file
    const terrainConfigPath = path.join(terrainDir, 'terrain.xml');
    
    const terrainConfigXml = `<?xml version="1.0" encoding="UTF-8"?>
<terrain>
  <id>${envStructure.id}_terrain</id>
  <name>${envStructure.name} Terrain</name>
  <area>
    <district>${envStructure.area.district}</district>
    <size>
      <width>${envStructure.area.size.width}</width>
      <length>${envStructure.area.size.length}</length>
    </size>
    <center>
      <x>${envStructure.area.center.x}</x>
      <y>${envStructure.area.center.y}</y>
      <z>${envStructure.area.center.z}</z>
    </center>
  </area>
  <heightmap>heightmap.raw</heightmap>
  <materialmap>materialmap.raw</materialmap>
  <materials>
    <material id="0" name="default" texture="terrain_default_d.xbm" normal="terrain_default_n.xbm" />
    <material id="1" name="concrete_damaged" texture="terrain_concrete_damaged_d.xbm" normal="terrain_concrete_damaged_n.xbm" />
    <material id="2" name="dirt" texture="terrain_dirt_d.xbm" normal="terrain_dirt_n.xbm" />
    <material id="3" name="grass" texture="terrain_grass_d.xbm" normal="terrain_grass_n.xbm" />
  </materials>
</terrain>`;
    
    await fs.writeFile(terrainConfigPath, terrainConfigXml);
    
    return {
      heightmap: heightmapPath,
      materialmap: materialmapPath,
      config: terrainConfigPath
    };
  }
  
  async generateHeightmap(envStructure, outputDir) {
    // Generate heightmap based on the terrain modifications
    logger.info(`Generating heightmap for ${envStructure.id}`);
    
    const width = envStructure.area.size.width;
    const length = envStructure.area.size.length;
    const heightModifications = envStructure.terrain.heightModifications;
    
    // Create a flat heightmap as base
    const heightmap = new Float32Array(width * length);
    
    // Apply height modifications
    for (let y = 0; y < length; y++) {
      for (let x = 0; x < width; x++) {
        // Convert grid coordinates to world coordinates
        const worldX = x - width / 2 + envStructure.area.center.x;
        const worldY = y - length / 2 + envStructure.area.center.y;
        
        // Apply each height modification
        for (const mod of heightModifications) {
          const dx = worldX - mod.position.x;
          const dy = worldY - mod.position.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance <= mod.radius) {
            // Calculate falloff (0 at edge, 1 at center)
            const falloff = 1 - (distance / mod.radius);
            
            // Apply modification based on type
            if (mod.type === 'hill') {
              heightmap[y * width + x] += mod.height * falloff * falloff;
            } else if (mod.type === 'crater') {
              heightmap[y * width + x] -= mod.depth * falloff * falloff;
            }
          }
        }
      }
    }
    
    // Convert to 16-bit RAW format
    const rawHeightmap = Buffer.alloc(width * length * 2);
    for (let i = 0; i < heightmap.length; i++) {
      // Convert from float to uint16 (0-65535)
      const value = Math.max(0, Math.min(65535, Math.floor((heightmap[i] + 1000) * 32)));
      rawHeightmap.writeUInt16LE(value, i * 2);
    }
    
    // Save heightmap
    const heightmapPath = path.join(outputDir, 'heightmap.raw');
    await fs.writeFile(heightmapPath, rawHeightmap);
    
    return heightmapPath;
  }
  
  async generateMaterialMap(envStructure, outputDir) {
    // Generate material map based on the material overrides
    logger.info(`Generating material map for ${envStructure.id}`);
    
    const width = envStructure.area.size.width;
    const length = envStructure.area.size.length;
    const materialOverrides = envStructure.terrain.materialOverrides;
    
    // Create a default material map (material ID 0)
    const materialmap = new Uint8Array(width * length);
    
    // Apply material overrides
    for (let y = 0; y < length; y++) {
      for (let x = 0; x < width; x++) {
        // Convert grid coordinates to world coordinates
        const worldX = x - width / 2 + envStructure.area.center.x;
        const worldY = y - length / 2 + envStructure.area.center.y;
        
        // Apply each material override
        for (const override of materialOverrides) {
          if (this.pointInPolygon(worldX, worldY, override.area.points)) {
            // Set material ID based on material type
            switch (override.material) {
              case 'concrete_damaged':
                materialmap[y * width + x] = 1;
                break;
              case 'dirt':
                materialmap[y * width + x] = 2;
                break;
              case 'grass':
                materialmap[y * width + x] = 3;
                break;
              default:
                materialmap[y * width + x] = 0;
            }
          }
        }
      }
    }
    
    // Save material map
    const materialmapPath = path.join(outputDir, 'materialmap.raw');
    await fs.writeFile(materialmapPath, materialmap);
    
    return materialmapPath;
  }
  
  pointInPolygon(x, y, polygon) {
    // Check if a point is inside a polygon using ray casting algorithm
    let inside = false;
    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
      const xi = polygon[i].x;
      const yi = polygon[i].y;
      const xj = polygon[j].x;
      const yj = polygon[j].y;
      
      const intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
      if (intersect) inside = !inside;
    }
    
    return inside;
  }
  
  async generateObjectPlacements(envStructure) {
    // Generate object placements based on the environment structure
    const objectsDir = path.join(this.config.paths.tempPath, 'environment', envStructure.id, 'objects');
    await fs.ensureDir(objectsDir);
    
    // Generate placement XML file
    const placementsPath = path.join(objectsDir, 'placements.xml');
    
    let placementsXml = `<?xml version="1.0" encoding="UTF-8"?>
<objectPlacements>
  <id>${envStructure.id}_objects</id>
  <name>${envStructure.name} Objects</name>
  <objects>
`;
    
    // Add each object
    for (let i = 0; i < envStructure.objects.length; i++) {
      const obj = envStructure.objects[i];
      
      placementsXml += `    <object id="${i+1}">
      <type>${obj.type}</type>
      <template>${obj.template}</template>
      <position>
        <x>${obj.position.x}</x>
        <y>${obj.position.y}</y>
        <z>${obj.position.z}</z>
      </position>
      <rotation>
        <x>${obj.rotation.x}</x>
        <y>${obj.rotation.y}</y>
        <z>${obj.rotation.z}</z>
      </rotation>
      <scale>
        <x>${obj.scale.x}</x>
        <y>${obj.scale.y}</y>
        <z>${obj.scale.z}</z>
      </scale>
    </object>
`;
    }
    
    placementsXml += `  </objects>
</objectPlacements>`;
    
    await fs.writeFile(placementsPath, placementsXml);
    
    // Generate template reference file
    const templatesPath = path.join(objectsDir, 'templates.xml');
    
    let templatesXml = `<?xml version="1.0" encoding="UTF-8"?>
<objectTemplates>
  <templates>
`;
    
    // Create reference to each unique template
    const uniqueTemplates = new Set();
    for (const obj of envStructure.objects) {
      uniqueTemplates.add(obj.template);
    }
    
    for (const template of uniqueTemplates) {
      templatesXml += `    <template id="${template}">
      <path>base\\${this.getTemplatePath(template)}</path>
    </template>
`;
    }
    
    templatesXml += `  </templates>
</objectTemplates>`;
    
    await fs.writeFile(templatesPath, templatesXml);
    
    return {
      placements: placementsPath,
      templates: templatesPath
    };
  }
  
  getTemplatePath(templateName) {
    // Map template names to file paths
    const templatePaths = {
      // Buildings
      'industrial_warehouse': 'world\\architecture\\industrial\\warehouse\\warehouse_medium.mesh',
      
      // Props
      'dumpster': 'world\\props\\containers\\dumpster\\dumpster_a.mesh',
      
      // Vegetation
      'tree_palm': 'world\\vegetation\\trees\\palm\\palm_tree_a.mesh'
    };
    
    return templatePaths[templateName] || 'placeholder.mesh';
  }
  
  async generateAtmosphereModifications(envStructure) {
    // Generate lighting and atmosphere modifications
    const atmosphereDir = path.join(this.config.paths.tempPath, 'environment', envStructure.id, 'atmosphere');
    await fs.ensureDir(atmosphereDir);
    
    // Generate atmosphere configuration file
    const atmospherePath = path.join(atmosphereDir, 'atmosphere.xml');
    
    const atmosphereXml = `<?xml version="1.0" encoding="UTF-8"?>
<atmosphere>
  <id>${envStructure.id}_atmosphere</id>
  <name>${envStructure.name} Atmosphere</name>
  <daytime>
    <ambientColor>${envStructure.atmosphere.daytimeSettings.ambientColor}</ambientColor>
    <sunColor>${envStructure.atmosphere.daytimeSettings.sunColor}</sunColor>
    <sunIntensity>${envStructure.atmosphere.daytimeSettings.sunIntensity}</sunIntensity>
    <skyColor>${envStructure.atmosphere.daytimeSettings.skyColor}</skyColor>
  </daytime>
  <nighttime>
    <ambientColor>${envStructure.atmosphere.nighttimeSettings.ambientColor}</ambientColor>
    <moonColor>${envStructure.atmosphere.nighttimeSettings.moonColor}</moonColor>
    <moonIntensity>${envStructure.atmosphere.nighttimeSettings.moonIntensity}</moonIntensity>
    <skyColor>${envStructure.atmosphere.nighttimeSettings.skyColor}</skyColor>
  </nighttime>
  <fog>
    <color>${envStructure.atmosphere.fogSettings.color}</color>
    <density>${envStructure.atmosphere.fogSettings.density}</density>
    <startDistance>${envStructure.atmosphere.fogSettings.startDistance}</startDistance>
    <endDistance>${envStructure.atmosphere.fogSettings.endDistance}</endDistance>
  </fog>
</atmosphere>`;
    
    await fs.writeFile(atmospherePath, atmosphereXml);
    
    // Generate env files for different times of day
    const daytimeEnvPath = path.join(atmosphereDir, 'daytime.env');
    const nighttimeEnvPath = path.join(atmosphereDir, 'nighttime.env');
    
    // Generate daytime env file
    const daytimeEnv = {
      name: `${envStructure.name} Daytime`,
      ambientColor: this.hexToRgb(envStructure.atmosphere.daytimeSettings.ambientColor),
      sunColor: this.hexToRgb(envStructure.atmosphere.daytimeSettings.sunColor),
      sunIntensity: envStructure.atmosphere.daytimeSettings.sunIntensity,
      skyColor: this.hexToRgb(envStructure.atmosphere.daytimeSettings.skyColor),
      fogColor: this.hexToRgb(envStructure.atmosphere.fogSettings.color),
      fogDensity: envStructure.atmosphere.fogSettings.density,
      fogStart: envStructure.atmosphere.fogSettings.startDistance,
      fogEnd: envStructure.atmosphere.fogSettings.endDistance
    };
    
    // Generate nighttime env file
    const nighttimeEnv = {
      name: `${envStructure.name} Nighttime`,
      ambientColor: this.hexToRgb(envStructure.atmosphere.nighttimeSettings.ambientColor),
      moonColor: this.hexToRgb(envStructure.atmosphere.nighttimeSettings.moonColor),
      moonIntensity: envStructure.atmosphere.nighttimeSettings.moonIntensity,
      skyColor: this.hexToRgb(envStructure.atmosphere.nighttimeSettings.skyColor),
      fogColor: this.hexToRgb(envStructure.atmosphere.fogSettings.color),
      fogDensity: envStructure.atmosphere.fogSettings.density * 1.5, // Thicker fog at night
      fogStart: envStructure.atmosphere.fogSettings.startDistance * 0.7, // Closer fog at night
      fogEnd: envStructure.atmosphere.fogSettings.endDistance * 0.7
    };
    
    await fs.writeJson(daytimeEnvPath, daytimeEnv, { spaces: 2 });
    await fs.writeJson(nighttimeEnvPath, nighttimeEnv, { spaces: 2 });
    
    return {
      config: atmospherePath,
      daytime: daytimeEnvPath,
      nighttime: nighttimeEnvPath
    };
  }
  
  hexToRgb(hex) {
    // Convert hex color to RGB
    const r = parseInt(hex.slice(1, 3), 16) / 255;
    const g = parseInt(hex.slice(3, 5), 16) / 255;
    const b = parseInt(hex.slice(5, 7), 16) / 255;
    
    return [r, g, b];
  }
  
  async generateWeatherPatterns(envStructure) {
    // Generate weather patterns
    const weatherDir = path.join(this.config.paths.tempPath, 'environment', envStructure.id, 'weather');
    await fs.ensureDir(weatherDir);
    
    // Generate weather configuration file
    const weatherPath = path.join(weatherDir, 'weather.xml');
    
    let weatherXml = `<?xml version="1.0" encoding="UTF-8"?>
<weather>
  <id>${envStructure.id}_weather</id>
  <name>${envStructure.name} Weather</name>
  <patterns>
`;
    
    // Add each weather pattern
    for (const pattern of envStructure.weather.patterns) {
      weatherXml += `    <pattern>
      <type>${pattern.type}</type>
      <probability>${pattern.probability}</probability>
      <duration>
        <min>${pattern.duration.min}</min>
        <max>${pattern.duration.max}</max>
      </duration>
`;
      
      if (pattern.intensity !== undefined) {
        weatherXml += `      <intensity>${pattern.intensity}</intensity>
`;
      }
      
      weatherXml += `    </pattern>
`;
    }
    
    weatherXml += `  </patterns>
</weather>`;
    
    await fs.writeFile(weatherPath, weatherXml);
    
    // Generate specific weather effect files
    const effectsMap = {
      'clear': 'clear.weather',
      'rain': 'rain.weather',
      'fog': 'fog.weather'
    };
    
    const effectFiles = {};
    
    for (const pattern of envStructure.weather.patterns) {
      const effectFileName = effectsMap[pattern.type];
      if (effectFileName) {
        const effectPath = path.join(weatherDir, effectFileName);
        
        // Generate weather effect file
        const effectData = {
          name: `${envStructure.name} ${pattern.type.charAt(0).toUpperCase() + pattern.type.slice(1)}`,
          type: pattern.type
        };
        
        if (pattern.intensity !== undefined) {
          effectData.intensity = pattern.intensity;
        }
        
        if (pattern.type === 'rain') {
          effectData.particleCount = Math.floor(pattern.intensity * 1000);
          effectData.puddleFormation = pattern.intensity > 0.5;
        } else if (pattern.type === 'fog') {
          effectData.density = pattern.intensity;
          effectData.color = this.hexToRgb(envStructure.atmosphere.fogSettings.color);
        }
        
        await fs.writeJson(effectPath, effectData, { spaces: 2 });
        effectFiles[pattern.type] = effectPath;
      }
    }
    
    return {
      config: weatherPath,
      effects: effectFiles
    };
  }
  
  async generateEnvironmentScript(envStructure) {
    // Generate Redscript file to control the environment
    const scriptDir = path.join(this.config.paths.tempPath, 'scripts');
    await fs.ensureDir(scriptDir);
    
    const scriptPath = path.join(scriptDir, `${envStructure.id}_env.reds`);
    
    const scriptContent = `// ${envStructure.name} Environment Controller
// Generated by CP2077 Mod Generator

module ${envStructure.id}_env

import EnvSystem.*
import WeatherSystem.*
import GameplaySystem.*
import PlayerSystem.*

// Main environment controller class
public class ${this.pascalCase(envStructure.id)}EnvController extends ScriptableSystem {
  private let m_isActive: Bool;
  private let m_area: Area;
  private let m_areaTriggered: Bool;
  
  public func Initialize() -> Void {
    this.m_isActive = false;
    this.m_areaTriggered = false;
    
    // Initialize area
    this.m_area = new Area();
    this.m_area.center = new Vector3(
      ${envStructure.area.center.x},
      ${envStructure.area.center.y},
      ${envStructure.area.center.z}
    );
    this.m_area.size = new Vector2(
      ${envStructure.area.size.width},
      ${envStructure.area.size.length}
    );
    
    // Register for events
    this.RegisterForEvents();
    
    LogChannel(n"${envStructure.id}", "Environment controller initialized");
  }
  
  private func RegisterForEvents() -> Void {
    // Register for player position updates
    let player = GetPlayer(GetGameInstance());
    if IsDefined(player) {
      let positionListener = new ${this.pascalCase(envStructure.id)}PositionListener();
      positionListener.SetController(this);
      player.RegisterInputListener(positionListener);
    }
  }
  
  public func OnAreaEnter() -> Void {
    if this.m_areaTriggered {
      return;
    }
    
    this.m_areaTriggered = true;
    this.ActivateEnvironment();
    
    LogChannel(n"${envStructure.id}", "Player entered environment area");
  }
  
  public func OnAreaExit() -> Void {
    if !this.m_areaTriggered {
      return;
    }
    
    this.m_areaTriggered = false;
    this.DeactivateEnvironment();
    
    LogChannel(n"${envStructure.id}", "Player exited environment area");
  }
  
  public func ActivateEnvironment() -> Void {
    if this.m_isActive {
      return;
    }
    
    this.m_isActive = true;
    
    // Apply terrain
    this.ApplyTerrain();
    
    // Apply atmosphere
    this.ApplyAtmosphere();
    
    // Apply weather
    this.ApplyWeather();
    
    LogChannel(n"${envStructure.id}", "Environment activated");
  }
  
  public func DeactivateEnvironment() -> Void {
    if !this.m_isActive {
      return;
    }
    
    this.m_isActive = false;
    
    // Restore default environment
    this.RestoreDefaultEnvironment();
    
    LogChannel(n"${envStructure.id}", "Environment deactivated");
  }
  
  private func ApplyTerrain() -> Void {
    // In a real implementation, this would apply the terrain modifications
    let envSystem = GameInstance.GetEnvSystem(GetGameInstance());
    if IsDefined(envSystem) {
      // Apply terrain heightmap
      // Apply terrain textures
    }
  }
  
  private func ApplyAtmosphere() -> Void {
    // Apply atmosphere settings
    let envSystem = GameInstance.GetEnvSystem(GetGameInstance());
    if IsDefined(envSystem) {
      let timeSystem = GameInstance.GetTimeSystem(GetGameInstance());
      
      // Check if it's day or night
      let isDay = true;
      if IsDefined(timeSystem) {
        let gameTime = timeSystem.GetGameTime();
        let hours = GameTime.GetHours(gameTime);
        isDay = hours >= 6 && hours < 20;
      }
      
      // Apply appropriate env settings
      if (isDay) {
        envSystem.SetEnvParameter("ambientColor", [
          ${this.hexToRgb(envStructure.atmosphere.daytimeSettings.ambientColor).join(', ')}
        ]);
        envSystem.SetEnvParameter("sunColor", [
          ${this.hexToRgb(envStructure.atmosphere.daytimeSettings.sunColor).join(', ')}
        ]);
        envSystem.SetEnvParameter("sunIntensity", ${envStructure.atmosphere.daytimeSettings.sunIntensity});
        envSystem.SetEnvParameter("skyColor", [
          ${this.hexToRgb(envStructure.atmosphere.daytimeSettings.skyColor).join(', ')}
        ]);
      } else {
        envSystem.SetEnvParameter("ambientColor", [
          ${this.hexToRgb(envStructure.atmosphere.nighttimeSettings.ambientColor).join(', ')}
        ]);
        envSystem.SetEnvParameter("moonColor", [
          ${this.hexToRgb(envStructure.atmosphere.nighttimeSettings.moonColor).join(', ')}
        ]);
        envSystem.SetEnvParameter("moonIntensity", ${envStructure.atmosphere.nighttimeSettings.moonIntensity});
        envSystem.SetEnvParameter("skyColor", [
          ${this.hexToRgb(envStructure.atmosphere.nighttimeSettings.skyColor).join(', ')}
        ]);
      }
      
      // Apply fog settings
      envSystem.SetEnvParameter("fogColor", [
        ${this.hexToRgb(envStructure.atmosphere.fogSettings.color).join(', ')}
      ]);
      envSystem.SetEnvParameter("fogDensity", ${envStructure.atmosphere.fogSettings.density});
      envSystem.SetEnvParameter("fogStartDistance", ${envStructure.atmosphere.fogSettings.startDistance});
      envSystem.SetEnvParameter("fogEndDistance", ${envStructure.atmosphere.fogSettings.endDistance});
    }
  }
  
  private func ApplyWeather() -> Void {
    // Apply weather pattern
    let weatherSystem = GameInstance.GetWeatherSystem(GetGameInstance());
    if IsDefined(weatherSystem) {
      // Select a weather pattern based on probabilities
      let patternType = this.SelectWeatherPattern();
      
      // Apply the selected pattern
      weatherSystem.SetWeather(n"${envStructure.id}_" + patternType);
    }
  }
  
  private func SelectWeatherPattern() -> String {
    // Select a weather pattern based on probabilities
    let random = RandF();
    let cumulativeProbability = 0.0;
    
    ${this.generateWeatherSelectionCode(envStructure)}
    
    // Default to clear weather if no pattern is selected
    return "clear";
  }
  
  private func RestoreDefaultEnvironment() -> Void {
    // Restore default environment settings
    let envSystem = GameInstance.GetEnvSystem(GetGameInstance());
    if IsDefined(envSystem) {
      envSystem.ResetEnvParameters();
    }
    
    // Restore default weather
    let weatherSystem = GameInstance.GetWeatherSystem(GetGameInstance());
    if IsDefined(weatherSystem) {
      weatherSystem.ResetWeather();
    }
  }
  
  public func IsActive() -> Bool {
    return this.m_isActive;
  }
  
  public func CheckPosition(position: Vector3) -> Void {
    // Check if the position is inside the area
    let isInside = this.IsInsideArea(position);
    
    if (isInside && !this.m_areaTriggered) {
      this.OnAreaEnter();
    } else if (!isInside && this.m_areaTriggered) {
      this.OnAreaExit();
    }
  }
  
  private func IsInsideArea(position: Vector3) -> Bool {
    let dx = position.X - this.m_area.center.X;
    let dy = position.Y - this.m_area.center.Y;
    
    return Abs(dx) <= this.m_area.size.X / 2.0 && Abs(dy) <= this.m_area.size.Y / 2.0;
  }
}

// Position listener for player position updates
public class ${this.pascalCase(envStructure.id)}PositionListener extends ScriptableComponentSystem {
  private let m_controller: wref<${this.pascalCase(envStructure.id)}EnvController>;
  
  public func SetController(controller: ref<${this.pascalCase(envStructure.id)}EnvController>) -> Void {
    this.m_controller = controller;
  }
  
  public func OnPositionUpdate(evt: ref<PositionUpdateEvent>) -> Void {
    if !IsDefined(this.m_controller) {
      return;
    }